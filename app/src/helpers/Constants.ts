import { join } from "path";
import OS from 'os';

export enum Duration {
  MILLISECONDS = 1,
  SECONDS = 1000 * MILLISECONDS,
  MINUTES = 60 * SECONDS,
  HOURS = 60 * MINUTES,
  DAY = 24 * HOURS,
}

export enum Storage {
  BYTE = 1,
  KILOBYTE = 1024 * BYTE,
  MEGABYTE = 1024 * KILOBYTE,
  GIGABYTE = 1024 * MEGABYTE,
}

export enum Status {
  SUCCESS = 0,
  PASS = 1,
  ERR = 2,
}

// Generated by https://quicktype.io

export interface Progress {
  percent:      number;
  totalSize:    string;
  currentSpeed: string;
  eta:          string;
}


export const downloadPath = process.platform === 'win32' ? join(OS.homedir(), 'AppData', 'Roaming', '.webdl') : join(OS.homedir(), '.webdl')

// Generated by https://quicktype.io

export interface InfoVideo {
  page:            string;
  player_response: PlayerResponse;
  response:        Response;
  html5player:     string;
  formats:         InfoVideoFormat[];
  related_videos:  RelatedVideo[];
  videoDetails:    InfoVideoVideoDetails;
  full:            boolean;
}

export interface InfoVideoFormat {
  mimeType:         string;
  qualityLabel:     null | string;
  bitrate:          number;
  audioBitrate?:    number | null;
  itag:             number;
  url:              string;
  width?:           number;
  height?:          number;
  lastModified:     string;
  contentLength?:   string;
  quality:          string;
  fps?:             number;
  projectionType:   ProjectionType;
  averageBitrate?:  number;
  audioQuality?:    string;
  approxDurationMs: string;
  audioSampleRate?: string;
  audioChannels?:   number;
  hasVideo:         boolean;
  hasAudio:         boolean;
  container:        Container;
  codecs:           string;
  videoCodec:       null | string;
  audioCodec:       null | string;
  isLive:           boolean;
  isHLS:            boolean;
  isDashMPD:        boolean;
  initRange?:       Range;
  indexRange?:      Range;
  colorInfo?:       ColorInfo;
  highReplication?: boolean;
  loudnessDb?:      number;
}

export interface ColorInfo {
  primaries:               Primaries;
  transferCharacteristics: TransferCharacteristics;
  matrixCoefficients:      MatrixCoefficients;
}

export enum MatrixCoefficients {
  ColorMatrixCoefficientsBt709 = "COLOR_MATRIX_COEFFICIENTS_BT709",
}

export enum Primaries {
  ColorPrimariesBt709 = "COLOR_PRIMARIES_BT709",
}

export enum TransferCharacteristics {
  ColorTransferCharacteristicsBt709 = "COLOR_TRANSFER_CHARACTERISTICS_BT709",
}

export enum Container {
  Mp4 = "mp4",
  Webm = "webm",
}

export interface Range {
  start: string;
  end:   string;
}

export enum ProjectionType {
  Rectangular = "RECTANGULAR",
}

export interface PlayerResponse {
  responseContext:   PlayerResponseResponseContext;
  playabilityStatus: PlayabilityStatus;
  streamingData:     StreamingData;
  playbackTracking:  PlaybackTracking;
  captions:          Captions;
  videoDetails:      PlayerResponseVideoDetails;
  playerConfig:      PlayerConfig;
  storyboards:       Storyboards;
  microformat:       Microformat;
  cards:             Cards;
  trackingParams:    string;
  attestation:       Attestation;
  messages:          Message[];
  endscreen:         Endscreen;
  frameworkUpdates:  PlayerResponseFrameworkUpdates;
}

export interface Attestation {
  playerAttestationRenderer: PlayerAttestationRenderer;
}

export interface PlayerAttestationRenderer {
  challenge:    string;
  botguardData: BotguardData;
}

export interface BotguardData {
  program:        string;
  interpreterUrl: string;
}

export interface Captions {
  playerCaptionsRenderer:          PlayerCaptionsRenderer;
  playerCaptionsTracklistRenderer: PlayerCaptionsTracklistRenderer;
}

export interface PlayerCaptionsRenderer {
  baseUrl:    string;
  visibility: string;
}

export interface PlayerCaptionsTracklistRenderer {
  captionTracks:          CaptionTrack[];
  audioTracks:            AudioTrack[];
  translationLanguages:   TranslationLanguage[];
  defaultAudioTrackIndex: number;
}

export interface AudioTrack {
  captionTrackIndices: number[];
}

export interface CaptionTrack {
  baseUrl:        string;
  name:           HammerfestPonies;
  vssId:          string;
  languageCode:   string;
  kind:           string;
  isTranslatable: boolean;
}

export interface HammerfestPonies {
  simpleText: string;
}

export interface TranslationLanguage {
  languageCode: string;
  languageName: HammerfestPonies;
}

export interface Cards {
  cardCollectionRenderer: CardCollectionRenderer;
}

export interface CardCollectionRenderer {
  cards:                    Card[];
  headerText:               HammerfestPonies;
  icon:                     CloseButton;
  closeButton:              CloseButton;
  trackingParams:           string;
  allowTeaserDismiss:       boolean;
  logIconVisibilityUpdates: boolean;
}

export interface Card {
  cardRenderer: CardRenderer;
}

export interface CardRenderer {
  teaser:         Teaser;
  content:        CardRendererContent;
  cueRanges:      CueRange[];
  icon:           CloseButton;
  trackingParams: string;
  cardId:         string;
  feature:        string;
}

export interface CardRendererContent {
  videoInfoCardContentRenderer: VideoInfoCardContentRenderer;
}

export interface VideoInfoCardContentRenderer {
  videoThumbnail: IconClass;
  lengthString:   ShortViewCountText;
  videoTitle:     HammerfestPonies;
  channelName:    HammerfestPonies;
  viewCountText:  HammerfestPonies;
  action:         CurrentVideoEndpoint;
  trackingParams: string;
}

export interface CurrentVideoEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  watchEndpoint:       CurrentVideoEndpointWatchEndpoint;
}

export interface CurrentVideoEndpointCommandMetadata {
  webCommandMetadata: PurpleWebCommandMetadata;
}

export interface PurpleWebCommandMetadata {
  url:         string;
  webPageType: WebPageType;
  rootVe:      number;
  apiUrl?:     PurpleAPIURL;
}

export enum PurpleAPIURL {
  YoutubeiV1Browse = "/youtubei/v1/browse",
}

export enum WebPageType {
  WebPageTypeBrowse = "WEB_PAGE_TYPE_BROWSE",
  WebPageTypeChannel = "WEB_PAGE_TYPE_CHANNEL",
  WebPageTypeSearch = "WEB_PAGE_TYPE_SEARCH",
  WebPageTypeUnknown = "WEB_PAGE_TYPE_UNKNOWN",
  WebPageTypeWatch = "WEB_PAGE_TYPE_WATCH",
}

export interface CurrentVideoEndpointWatchEndpoint {
  videoId:                            string;
  watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
}

export interface WatchEndpointSupportedOnesieConfig {
  html5PlaybackOnesieConfig: Html5PlaybackOnesieConfig;
}

export interface Html5PlaybackOnesieConfig {
  commonConfig: CommonConfig;
}

export interface CommonConfig {
  url: string;
}

export interface ShortViewCountText {
  accessibility: AccessibilityData;
  simpleText:    string;
}

export interface AccessibilityData {
  accessibilityData: Accessibility;
}

export interface Accessibility {
  label: string;
}

export interface IconClass {
  thumbnails: ThumbnailElement[];
}

export interface ThumbnailElement {
  url:    string;
  width:  number;
  height: number;
}

export interface CueRange {
  startCardActiveMs: string;
  endCardActiveMs:   string;
  teaserDurationMs:  string;
  iconAfterTeaserMs: string;
}

export interface CloseButton {
  infoCardIconRenderer: Renderer;
}

export interface Renderer {
  trackingParams: string;
}

export interface Teaser {
  simpleCardTeaserRenderer: SimpleCardTeaserRenderer;
}

export interface SimpleCardTeaserRenderer {
  message:              HammerfestPonies;
  trackingParams:       string;
  prominent:            boolean;
  logVisibilityUpdates: boolean;
}

export interface Endscreen {
  endscreenRenderer: EndscreenRenderer;
}

export interface EndscreenRenderer {
  elements:       Element[];
  startMs:        string;
  trackingParams: string;
}

export interface Element {
  endscreenElementRenderer: EndscreenElementRenderer;
}

export interface EndscreenElementRenderer {
  style:            string;
  image:            IconClass;
  icon?:            EndscreenElementRendererIcon;
  left:             number;
  width:            number;
  top:              number;
  aspectRatio:      number;
  startMs:          string;
  endMs:            string;
  title:            ShortViewCountText;
  metadata:         HammerfestPonies;
  callToAction?:    HammerfestPonies;
  dismiss?:         HammerfestPonies;
  endpoint:         EndscreenElementRendererEndpoint;
  hovercardButton?: HovercardButton;
  trackingParams:   string;
  isSubscribe?:     boolean;
  id:               string;
  videoDuration?:   ShortViewCountText;
}

export interface EndscreenElementRendererEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  browseEndpoint?:     EndpointBrowseEndpoint;
  watchEndpoint?:      CurrentVideoEndpointWatchEndpoint;
}

export interface EndpointBrowseEndpoint {
  browseId: string;
}

export interface HovercardButton {
  subscribeButtonRenderer: SubscribeButtonRenderer;
}

export interface SubscribeButtonRenderer {
  buttonText:               ArakGroundhog;
  subscribed:               boolean;
  enabled:                  boolean;
  type:                     string;
  channelId:                ChannelID;
  showPreferences:          boolean;
  subscribedButtonText:     ArakGroundhog;
  unsubscribedButtonText:   ArakGroundhog;
  trackingParams:           string;
  unsubscribeButtonText:    ArakGroundhog;
  serviceEndpoints:         ServiceEndpointElement[];
  subscribeAccessibility:   AccessibilityData;
  unsubscribeAccessibility: AccessibilityData;
  signInEndpoint:           SubscribeButtonRendererSignInEndpoint;
}

export interface ArakGroundhog {
  runs: PurpleRun[];
}

export interface PurpleRun {
  text: string;
}

export enum ChannelID {
  UCDK9QD5DAQMLPzrtA7A4OA = "UCDK9qD5DAQML-pzrtA7A4oA",
  UCFhY4CngxbnRlMXF5X9Kw = "UCFhY4CngxbnRlMX-F5x9_Kw",
  UCOBXQF0RKsxYIBNRxI4KPSg = "UCOBXQF0RKsxYIBNRxI4kPSg",
  UCRPseYLGpNygVi34QpGNqpA = "UCrPseYLGpNygVi34QpGNqpA",
  UChXKjLEzAB1K7EZQey7Fm1Q = "UChXKjLEzAB1K7EZQey7Fm1Q",
  UCujyjxsq5FZNVnQro51ZKSQ = "UCujyjxsq5FZNVnQro51zKSQ",
}

export interface ServiceEndpointElement {
  clickTrackingParams:    string;
  commandMetadata:        PurpleCommandMetadata;
  subscribeEndpoint?:     SubscribeEndpoint;
  signalServiceEndpoint?: PurpleSignalServiceEndpoint;
}

export interface PurpleCommandMetadata {
  webCommandMetadata: FluffyWebCommandMetadata;
}

export interface FluffyWebCommandMetadata {
  sendPost: boolean;
  apiUrl?:  FluffyAPIURL;
}

export enum FluffyAPIURL {
  YoutubeiV1AccountAccountMenu = "/youtubei/v1/account/account_menu",
  YoutubeiV1BrowseEditPlaylist = "/youtubei/v1/browse/edit_playlist",
  YoutubeiV1Feedback = "/youtubei/v1/feedback",
  YoutubeiV1GetTranscript = "/youtubei/v1/get_transcript",
  YoutubeiV1Next = "/youtubei/v1/next",
  YoutubeiV1PlaylistCreate = "/youtubei/v1/playlist/create",
  YoutubeiV1ShareGetSharePanel = "/youtubei/v1/share/get_share_panel",
  YoutubeiV1ShareGetWebPlayerSharePanel = "/youtubei/v1/share/get_web_player_share_panel",
  YoutubeiV1SubscriptionSubscribe = "/youtubei/v1/subscription/subscribe",
  YoutubeiV1SubscriptionUnsubscribe = "/youtubei/v1/subscription/unsubscribe",
}

export interface PurpleSignalServiceEndpoint {
  signal:  Signal;
  actions: PurpleAction[];
}

export interface PurpleAction {
  clickTrackingParams: string;
  openPopupAction:     PurpleOpenPopupAction;
}

export interface PurpleOpenPopupAction {
  popup:     PurplePopup;
  popupType: string;
}

export interface PurplePopup {
  confirmDialogRenderer: ConfirmDialogRenderer;
}

export interface ConfirmDialogRenderer {
  trackingParams:  string;
  dialogMessages:  ArakGroundhog[];
  confirmButton:   A11YSkipNavigationButtonClass;
  cancelButton:    A11YSkipNavigationButtonClass;
  primaryIsCancel: boolean;
}

export interface A11YSkipNavigationButtonClass {
  buttonRenderer: A11YSkipNavigationButtonButtonRenderer;
}

export interface A11YSkipNavigationButtonButtonRenderer {
  style:               string;
  size:                string;
  isDisabled:          boolean;
  text?:               ArakGroundhog;
  accessibility?:      Accessibility;
  trackingParams:      string;
  serviceEndpoint?:    UnsubscribeCommand;
  command?:            PurpleCommand;
  navigationEndpoint?: CurrentVideoEndpoint;
}

export interface PurpleCommand {
  clickTrackingParams:    string;
  commandMetadata:        PurpleCommandMetadata;
  continuationCommand?:   ContinuationCommand;
  signalServiceEndpoint?: CommandSignalServiceEndpoint;
}

export interface ContinuationCommand {
  token:   string;
  request: string;
}

export interface CommandSignalServiceEndpoint {
  signal:  Signal;
  actions: FluffyAction[];
}

export interface FluffyAction {
  clickTrackingParams: string;
  signalAction:        SignalAction;
}

export interface SignalAction {
  signal: string;
}

export enum Signal {
  ClientSignal = "CLIENT_SIGNAL",
}

export interface UnsubscribeCommand {
  clickTrackingParams: string;
  commandMetadata:     PurpleCommandMetadata;
  unsubscribeEndpoint: SubscribeEndpoint;
}

export interface SubscribeEndpoint {
  channelIds: ChannelID[];
  params:     string;
}

export interface SubscribeButtonRendererSignInEndpoint {
  clickTrackingParams: string;
  commandMetadata:     SignInEndpointCommandMetadata;
}

export interface SignInEndpointCommandMetadata {
  webCommandMetadata: CommonConfig;
}

export interface EndscreenElementRendererIcon {
  thumbnails: CommonConfig[];
}

export interface PlayerResponseFrameworkUpdates {
  entityBatchUpdate: PurpleEntityBatchUpdate;
}

export interface PurpleEntityBatchUpdate {
  mutations: PurpleMutation[];
  timestamp: Timestamp;
}

export interface PurpleMutation {
  entityKey: string;
  type:      string;
  payload:   Payload;
}

export interface Payload {
  offlineabilityEntity: OfflineabilityEntity;
}

export interface OfflineabilityEntity {
  key:         string;
  accessState: string;
}

export interface Timestamp {
  seconds: string;
  nanos:   number;
}

export interface Message {
  mealbarPromoRenderer: MealbarPromoRenderer;
}

export interface MealbarPromoRenderer {
  icon:                IconClass;
  messageTexts:        ArakGroundhog[];
  actionButton:        DismissButtonClass;
  dismissButton:       DismissButtonClass;
  triggerCondition:    string;
  style:               string;
  trackingParams:      string;
  impressionEndpoints: AcceptCommand[];
  isVisible:           boolean;
  messageTitle:        ArakGroundhog;
}

export interface DismissButtonClass {
  buttonRenderer: DismissButtonButtonRenderer;
}

export interface DismissButtonButtonRenderer {
  style:               string;
  size:                string;
  text:                ArakGroundhog;
  serviceEndpoint?:    AcceptCommand;
  navigationEndpoint?: PurpleNavigationEndpoint;
  trackingParams:      string;
  command?:            AcceptCommand;
  isDisabled?:         boolean;
}

export interface AcceptCommand {
  clickTrackingParams: string;
  commandMetadata:     PurpleCommandMetadata;
  feedbackEndpoint:    FeedbackEndpoint;
}

export interface FeedbackEndpoint {
  feedbackToken: string;
  uiActions:     UIActions;
}

export interface UIActions {
  hideEnclosingContainer: boolean;
}

export interface PurpleNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  browseEndpoint:      PurpleBrowseEndpoint;
}

export interface PurpleBrowseEndpoint {
  browseId: string;
  params:   string;
}

export interface Microformat {
  playerMicroformatRenderer: PlayerMicroformatRenderer;
}

export interface PlayerMicroformatRenderer {
  thumbnail:          IconClass;
  embed:              Embed;
  title:              HammerfestPonies;
  description:        HammerfestPonies;
  lengthSeconds:      string;
  ownerProfileUrl:    string;
  externalChannelId:  ChannelID;
  isFamilySafe:       boolean;
  availableCountries: string[];
  isUnlisted:         boolean;
  hasYpcMetadata:     boolean;
  viewCount:          string;
  category:           string;
  publishDate:        string;
  ownerChannelName:   OwnerChannelName;
  uploadDate:         string;
}

export interface Embed {
  iframeUrl:      string;
  flashUrl:       string;
  width:          number;
  height:         number;
  flashSecureUrl: string;
}

export enum OwnerChannelName {
  Dubs = "DUBS",
  Fuslie = "fuslie",
  Ludwig = "Ludwig",
  OfflineTV = "OfflineTV",
  Pokimane = "Pokimane",
  The39DaphVods = "39daph vods",
}

export interface PlayabilityStatus {
  status:          string;
  playableInEmbed: boolean;
  miniplayer:      Miniplayer;
  contextParams:   string;
}

export interface Miniplayer {
  miniplayerRenderer: MiniplayerRenderer;
}

export interface MiniplayerRenderer {
  playbackMode: string;
}

export interface PlaybackTracking {
  videostatsPlaybackUrl:                   URL;
  videostatsDelayplayUrl:                  URL;
  videostatsWatchtimeUrl:                  URL;
  ptrackingUrl:                            URL;
  qoeUrl:                                  URL;
  atrUrl:                                  AtrURL;
  videostatsScheduledFlushWalltimeSeconds: number[];
  videostatsDefaultFlushIntervalSeconds:   number;
}

export interface AtrURL {
  baseUrl:                 string;
  elapsedMediaTimeSeconds: number;
}

export interface URL {
  baseUrl: string;
}

export interface PlayerConfig {
  audioConfig:           AudioConfig;
  streamSelectionConfig: StreamSelectionConfig;
  mediaCommonConfig:     MediaCommonConfig;
  webPlayerConfig:       WebPlayerConfig;
}

export interface AudioConfig {
  loudnessDb:              number;
  perceptualLoudnessDb:    number;
  enablePerFormatLoudness: boolean;
}

export interface MediaCommonConfig {
  dynamicReadaheadConfig: DynamicReadaheadConfig;
}

export interface DynamicReadaheadConfig {
  maxReadAheadMediaTimeMs: number;
  minReadAheadMediaTimeMs: number;
  readAheadGrowthRateMs:   number;
}

export interface StreamSelectionConfig {
  maxBitrate: string;
}

export interface WebPlayerConfig {
  webPlayerActionsPorting: WebPlayerActionsPorting;
}

export interface WebPlayerActionsPorting {
  getSharePanelCommand:        GetSharePanelCommand;
  subscribeCommand:            SubscribeCommand;
  unsubscribeCommand:          UnsubscribeCommand;
  addToWatchLaterCommand:      AddToWatchLaterCommand;
  removeFromWatchLaterCommand: RemoveFromWatchLaterCommand;
}

export interface AddToWatchLaterCommand {
  clickTrackingParams:  string;
  commandMetadata:      PurpleCommandMetadata;
  playlistEditEndpoint: AddToWatchLaterCommandPlaylistEditEndpoint;
}

export interface AddToWatchLaterCommandPlaylistEditEndpoint {
  playlistId: PlaylistID;
  actions:    TentacledAction[];
}

export interface TentacledAction {
  addedVideoId: string;
  action:       CunningAction;
}

export enum CunningAction {
  ActionAddVideo = "ACTION_ADD_VIDEO",
}

export enum PlaylistID {
  Wl = "WL",
}

export interface GetSharePanelCommand {
  clickTrackingParams:                 string;
  commandMetadata:                     PurpleCommandMetadata;
  webPlayerShareEntityServiceEndpoint: WebPlayerShareEntityServiceEndpoint;
}

export interface WebPlayerShareEntityServiceEndpoint {
  serializedShareEntity: string;
}

export interface RemoveFromWatchLaterCommand {
  clickTrackingParams:  string;
  commandMetadata:      PurpleCommandMetadata;
  playlistEditEndpoint: RemoveFromWatchLaterCommandPlaylistEditEndpoint;
}

export interface RemoveFromWatchLaterCommandPlaylistEditEndpoint {
  playlistId: PlaylistID;
  actions:    StickyAction[];
}

export interface StickyAction {
  action:         MagentaAction;
  removedVideoId: string;
}

export enum MagentaAction {
  ActionRemoveVideoByVideoID = "ACTION_REMOVE_VIDEO_BY_VIDEO_ID",
}

export interface SubscribeCommand {
  clickTrackingParams: string;
  commandMetadata:     PurpleCommandMetadata;
  subscribeEndpoint:   SubscribeEndpoint;
}

export interface PlayerResponseResponseContext {
  serviceTrackingParams:           ServiceTrackingParam[];
  mainAppWebResponseContext:       MainAppWebResponseContext;
  webResponseContextExtensionData: PurpleWebResponseContextExtensionData;
}

export interface MainAppWebResponseContext {
  loggedOut: boolean;
}

export interface ServiceTrackingParam {
  service: string;
  params:  Param[];
}

export interface Param {
  key:   string;
  value: string;
}

export interface PurpleWebResponseContextExtensionData {
  hasDecorated: boolean;
}

export interface Storyboards {
  playerStoryboardSpecRenderer: PlayerStoryboardSpecRenderer;
}

export interface PlayerStoryboardSpecRenderer {
  spec: string;
}

export interface StreamingData {
  expiresInSeconds: string;
  formats:          AdaptiveFormatElement[];
  adaptiveFormats:  AdaptiveFormatElement[];
}

export interface AdaptiveFormatElement {
  itag:             number;
  url:              string;
  mimeType:         string;
  bitrate:          number;
  width?:           number;
  height?:          number;
  initRange?:       Range;
  indexRange?:      Range;
  lastModified:     string;
  contentLength?:   string;
  quality:          string;
  fps?:             number;
  qualityLabel?:    string;
  projectionType:   ProjectionType;
  averageBitrate?:  number;
  approxDurationMs: string;
  colorInfo?:       ColorInfo;
  highReplication?: boolean;
  audioQuality?:    string;
  audioSampleRate?: string;
  audioChannels?:   number;
  loudnessDb?:      number;
}

export interface PlayerResponseVideoDetails {
  videoId:           string;
  title:             string;
  lengthSeconds:     string;
  keywords:          string[];
  channelId:         ChannelID;
  isOwnerViewing:    boolean;
  shortDescription:  string;
  isCrawlable:       boolean;
  thumbnail:         IconClass;
  averageRating:     number;
  allowRatings:      boolean;
  viewCount:         string;
  author:            OwnerChannelName;
  isPrivate:         boolean;
  isUnpluggedCorpus: boolean;
  isLiveContent:     boolean;
}

export interface RelatedVideo {
  id:                    string;
  title:                 string;
  published:             string;
  author:                Author;
  short_view_count_text: string;
  view_count:            string;
  length_seconds:        number;
  thumbnails:            ThumbnailElement[];
  richThumbnails:        ThumbnailElement[];
  isLive:                boolean;
}

export interface Author {
  id:                    ChannelID;
  name:                  OwnerChannelName;
  user:                  string;
  channel_url:           string;
  user_url:              string;
  thumbnails:            ThumbnailElement[];
  verified:              boolean;
  external_channel_url?: string;
  subscriber_count?:     number;
}

export interface Response {
  responseContext:             ResponseResponseContext;
  contents:                    Contents;
  currentVideoEndpoint:        CurrentVideoEndpoint;
  trackingParams:              string;
  playerOverlays:              PlayerOverlays;
  overlay:                     Overlay;
  onResponseReceivedEndpoints: OnResponseReceivedEndpoint[];
  engagementPanels:            EngagementPanel[];
  topbar:                      Topbar;
  frameworkUpdates:            ResponseFrameworkUpdates;
}

export interface Contents {
  twoColumnWatchNextResults: TwoColumnWatchNextResults;
}

export interface TwoColumnWatchNextResults {
  results:          TwoColumnWatchNextResultsResults;
  secondaryResults: TwoColumnWatchNextResultsSecondaryResults;
  autoplay:         TwoColumnWatchNextResultsAutoplay;
}

export interface TwoColumnWatchNextResultsAutoplay {
  autoplay: AutoplayAutoplay;
}

export interface AutoplayAutoplay {
  sets:           Set[];
  countDownSecs:  number;
  trackingParams: string;
}

export interface Set {
  mode:          string;
  autoplayVideo: NavigationEndpoint;
}

export interface NavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  watchEndpoint:       AutoplayVideoWatchEndpoint;
}

export interface AutoplayVideoWatchEndpoint {
  videoId:                              string;
  params:                               string;
  playerParams:                         string;
  watchEndpointSupportedPrefetchConfig: WatchEndpointSupportedPrefetchConfig;
}

export interface WatchEndpointSupportedPrefetchConfig {
  prefetchHintConfig: PrefetchHintConfig;
}

export interface PrefetchHintConfig {
  prefetchPriority:                            number;
  countdownUiRelativeSecondsPrefetchCondition: number;
}

export interface TwoColumnWatchNextResultsResults {
  results: ResultsResults;
}

export interface ResultsResults {
  contents:       ResultsContent[];
  trackingParams: string;
}

export interface ResultsContent {
  videoPrimaryInfoRenderer?:   VideoPrimaryInfoRenderer;
  videoSecondaryInfoRenderer?: VideoSecondaryInfoRenderer;
  itemSectionRenderer?:        ItemSectionRenderer;
}

export interface ItemSectionRenderer {
  contents:          ItemSectionRendererContent[];
  trackingParams:    string;
  sectionIdentifier: string;
  targetId:          string;
}

export interface ItemSectionRendererContent {
  continuationItemRenderer: PurpleContinuationItemRenderer;
}

export interface PurpleContinuationItemRenderer {
  trigger:              string;
  continuationEndpoint: PurpleContinuationEndpoint;
}

export interface PurpleContinuationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     PurpleCommandMetadata;
  continuationCommand: ContinuationCommand;
}

export interface VideoPrimaryInfoRenderer {
  title:          ArakGroundhog;
  viewCount:      ViewCount;
  videoActions:   VideoActions;
  trackingParams: string;
  sentimentBar:   SentimentBar;
  superTitleLink: SuperTitleLink;
  dateText:       HammerfestPonies;
}

export interface SentimentBar {
  sentimentBarRenderer: SentimentBarRenderer;
}

export interface SentimentBarRenderer {
  percentIfIndifferent: number;
  percentIfLiked:       number;
  percentIfDisliked:    number;
  likeStatus:           string;
  tooltip:              string;
}

export interface SuperTitleLink {
  runs: SuperTitleLinkRun[];
}

export interface SuperTitleLinkRun {
  text:                string;
  navigationEndpoint?: PurpleNavigationEndpoint;
  loggingDirectives?:  LoggingDirectives;
}

export interface LoggingDirectives {
  trackingParams: string;
  visibility:     Visibility;
}

export interface Visibility {
  types: string;
}

export interface VideoActions {
  menuRenderer: VideoActionsMenuRenderer;
}

export interface VideoActionsMenuRenderer {
  items:           PurpleItem[];
  trackingParams:  string;
  topLevelButtons: TopLevelButton[];
  accessibility:   AccessibilityData;
}

export interface PurpleItem {
  menuNavigationItemRenderer?: MenuItemRenderer;
  menuServiceItemRenderer?:    MenuItemRenderer;
}

export interface MenuItemRenderer {
  text:                ArakGroundhog;
  icon:                IconImageClass;
  navigationEndpoint?: MenuNavigationItemRendererNavigationEndpoint;
  trackingParams:      string;
  serviceEndpoint?:    MenuNavigationItemRendererServiceEndpoint;
}

export interface IconImageClass {
  iconType: string;
}

export interface MenuNavigationItemRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     DefaultNavigationEndpointCommandMetadata;
  modalEndpoint:       PurpleModalEndpoint;
}

export interface DefaultNavigationEndpointCommandMetadata {
  webCommandMetadata: TentacledWebCommandMetadata;
}

export interface TentacledWebCommandMetadata {
  ignoreNavigation: boolean;
}

export interface PurpleModalEndpoint {
  modal: PurpleModal;
}

export interface PurpleModal {
  modalWithTitleAndButtonRenderer: PurpleModalWithTitleAndButtonRenderer;
}

export interface PurpleModalWithTitleAndButtonRenderer {
  title:   ArakGroundhog;
  content: ArakGroundhog;
  button:  PurpleButton;
}

export interface PurpleButton {
  buttonRenderer: PurpleButtonRenderer;
}

export interface PurpleButtonRenderer {
  style:              string;
  size:               string;
  isDisabled:         boolean;
  text:               HammerfestPonies;
  navigationEndpoint: FluffyNavigationEndpoint;
  trackingParams:     string;
}

export interface FluffyNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  signInEndpoint:      PurpleSignInEndpoint;
}

export interface PurpleSignInEndpoint {
  hack: boolean;
}

export interface MenuNavigationItemRendererServiceEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       ServiceEndpointCommandMetadata;
  signalServiceEndpoint: FluffySignalServiceEndpoint;
}

export interface ServiceEndpointCommandMetadata {
  webCommandMetadata: StickyWebCommandMetadata;
}

export interface StickyWebCommandMetadata {
  sendPost: boolean;
}

export interface FluffySignalServiceEndpoint {
  signal:  Signal;
  actions: IndigoAction[];
}

export interface IndigoAction {
  clickTrackingParams:                    string;
  changeEngagementPanelVisibilityAction?: ChangeEngagementPanelVisibilityAction;
  addToPlaylistCommand?:                  AddToPlaylistCommand;
  openPopupAction?:                       FluffyOpenPopupAction;
}

export interface AddToPlaylistCommand {
  openMiniplayer:      boolean;
  openListPanel:       boolean;
  videoId:             string;
  listType:            ListType;
  onCreateListCommand: OnCreateListCommand;
  videoIds:            string[];
}

export enum ListType {
  PlaylistEditListTypeQueue = "PLAYLIST_EDIT_LIST_TYPE_QUEUE",
}

export interface OnCreateListCommand {
  clickTrackingParams:           string;
  commandMetadata:               PurpleCommandMetadata;
  createPlaylistServiceEndpoint: CreatePlaylistServiceEndpoint;
}

export interface CreatePlaylistServiceEndpoint {
  videoIds: string[];
  params:   Params;
}

export enum Params {
  CAQ3D = "CAQ%3D",
}

export interface ChangeEngagementPanelVisibilityAction {
  targetId:   string;
  visibility: string;
}

export interface FluffyOpenPopupAction {
  popup:     FluffyPopup;
  popupType: PopupType;
}

export interface FluffyPopup {
  notificationActionRenderer: NotificationActionRenderer;
}

export interface NotificationActionRenderer {
  responseText:   HammerfestPonies;
  trackingParams: string;
}

export enum PopupType {
  Toast = "TOAST",
}

export interface TopLevelButton {
  toggleButtonRenderer?: ToggleButtonRenderer;
  buttonRenderer?:       TopLevelButtonButtonRenderer;
}

export interface TopLevelButtonButtonRenderer {
  style:               string;
  size:                string;
  isDisabled:          boolean;
  text:                ArakGroundhog;
  serviceEndpoint?:    Endpoint;
  icon:                IconImageClass;
  tooltip:             string;
  trackingParams:      string;
  accessibilityData:   AccessibilityData;
  navigationEndpoint?: TentacledNavigationEndpoint;
  accessibility?:      Accessibility;
}

export interface TentacledNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     DefaultNavigationEndpointCommandMetadata;
  modalEndpoint:       FluffyModalEndpoint;
}

export interface FluffyModalEndpoint {
  modal: FluffyModal;
}

export interface FluffyModal {
  modalWithTitleAndButtonRenderer: FluffyModalWithTitleAndButtonRenderer;
}

export interface FluffyModalWithTitleAndButtonRenderer {
  title:   ArakGroundhog;
  content: ArakGroundhog;
  button:  FluffyButton;
}

export interface FluffyButton {
  buttonRenderer: FluffyButtonRenderer;
}

export interface FluffyButtonRenderer {
  style:              string;
  size:               string;
  isDisabled:         boolean;
  text:               HammerfestPonies;
  navigationEndpoint: StickyNavigationEndpoint;
  trackingParams:     string;
}

export interface StickyNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  signInEndpoint:      FluffySignInEndpoint;
}

export interface FluffySignInEndpoint {
  nextEndpoint: CurrentVideoEndpoint;
  idamTag:      string;
}

export interface Endpoint {
  clickTrackingParams:        string;
  commandMetadata:            PurpleCommandMetadata;
  shareEntityServiceEndpoint: ShareEntityServiceEndpoint;
}

export interface ShareEntityServiceEndpoint {
  serializedShareEntity: string;
  commands:              CommandElement[];
}

export interface CommandElement {
  clickTrackingParams: string;
  openPopupAction:     CommandOpenPopupAction;
}

export interface CommandOpenPopupAction {
  popup:     TentacledPopup;
  popupType: string;
  beReused:  boolean;
}

export interface TentacledPopup {
  unifiedSharePanelRenderer: UnifiedSharePanelRenderer;
}

export interface UnifiedSharePanelRenderer {
  trackingParams:     string;
  showLoadingSpinner: boolean;
}

export interface ToggleButtonRenderer {
  style:                     StyleClass;
  isToggled:                 boolean;
  isDisabled:                boolean;
  defaultIcon:               IconImageClass;
  defaultText:               ShortViewCountText;
  toggledText:               ShortViewCountText;
  accessibility:             Accessibility;
  trackingParams:            string;
  defaultTooltip:            string;
  toggledTooltip:            string;
  toggledStyle:              StyleClass;
  defaultNavigationEndpoint: DefaultNavigationEndpoint;
  accessibilityData:         AccessibilityData;
  toggleButtonSupportedData: ToggleButtonSupportedData;
  targetId:                  string;
}

export interface DefaultNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     DefaultNavigationEndpointCommandMetadata;
  modalEndpoint:       DefaultNavigationEndpointModalEndpoint;
}

export interface DefaultNavigationEndpointModalEndpoint {
  modal: TentacledModal;
}

export interface TentacledModal {
  modalWithTitleAndButtonRenderer: TentacledModalWithTitleAndButtonRenderer;
}

export interface TentacledModalWithTitleAndButtonRenderer {
  title:   HammerfestPonies;
  content: HammerfestPonies;
  button:  FluffyButton;
}

export interface StyleClass {
  styleType: string;
}

export interface ToggleButtonSupportedData {
  toggleButtonIdData: ToggleButtonIDData;
}

export interface ToggleButtonIDData {
  id: string;
}

export interface ViewCount {
  videoViewCountRenderer: VideoViewCountRenderer;
}

export interface VideoViewCountRenderer {
  viewCount:      HammerfestPonies;
  shortViewCount: HammerfestPonies;
}

export interface VideoSecondaryInfoRenderer {
  owner:                     Owner;
  description:               Description;
  subscribeButton:           SubscribeButton;
  metadataRowContainer:      MetadataRowContainer;
  showMoreText:              HammerfestPonies;
  showLessText:              HammerfestPonies;
  trackingParams:            string;
  defaultExpanded:           boolean;
  descriptionCollapsedLines: number;
}

export interface Description {
  runs: DescriptionRun[];
}

export interface DescriptionRun {
  text:                string;
  navigationEndpoint?: IndigoNavigationEndpoint;
  loggingDirectives?:  LoggingDirectives;
}

export interface IndigoNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  urlEndpoint?:        PurpleURLEndpoint;
  browseEndpoint?:     PurpleBrowseEndpoint;
}

export interface PurpleURLEndpoint {
  url:      string;
  target:   string;
  nofollow: boolean;
}

export interface MetadataRowContainer {
  metadataRowContainerRenderer: MetadataRowContainerRenderer;
}

export interface MetadataRowContainerRenderer {
  collapsedItemCount: number;
  trackingParams:     string;
}

export interface Owner {
  videoOwnerRenderer: VideoOwnerRenderer;
}

export interface VideoOwnerRenderer {
  thumbnail:           IconClass;
  title:               Byline;
  subscriptionButton:  DismissStrategy;
  navigationEndpoint:  VideoOwnerRendererNavigationEndpoint;
  subscriberCountText: ShortViewCountText;
  trackingParams:      string;
  badges:              OwnerBadgeElement[];
}

export interface OwnerBadgeElement {
  metadataBadgeRenderer: OwnerBadgeMetadataBadgeRenderer;
}

export interface OwnerBadgeMetadataBadgeRenderer {
  icon:              IconImageClass;
  style:             MetadataBadgeRendererStyle;
  tooltip:           Tooltip;
  trackingParams:    string;
  accessibilityData: Accessibility;
}

export enum MetadataBadgeRendererStyle {
  BadgeStyleTypeVerified = "BADGE_STYLE_TYPE_VERIFIED",
}

export enum Tooltip {
  Verified = "Verified",
}

export interface VideoOwnerRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  browseEndpoint:      FluffyBrowseEndpoint;
}

export interface FluffyBrowseEndpoint {
  browseId:         ChannelID;
  canonicalBaseUrl: CanonicalBaseURL;
}

export enum CanonicalBaseURL {
  C39Daphvods = "/c/39daphvods",
  CFuslie = "/c/fuslie",
  COfflineTVgg = "/c/OfflineTVgg",
  ChannelUCRPseYLGpNygVi34QpGNqpA = "/channel/UCrPseYLGpNygVi34QpGNqpA",
  UserDUBSMB = "/user/DUBSmb",
  UserMrAndersLA = "/user/MrAndersLA",
  UserPokimane = "/user/pokimane",
}

export interface DismissStrategy {
  type: string;
}

export interface Byline {
  runs: BylineRun[];
}

export interface BylineRun {
  text:               OwnerChannelName;
  navigationEndpoint: VideoOwnerRendererNavigationEndpoint;
}

export interface SubscribeButton {
  buttonRenderer: SubscribeButtonButtonRenderer;
}

export interface SubscribeButtonButtonRenderer {
  style:              string;
  size:               string;
  isDisabled:         boolean;
  text:               ArakGroundhog;
  navigationEndpoint: IndecentNavigationEndpoint;
  trackingParams:     string;
  targetId:           string;
}

export interface IndecentNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     DefaultNavigationEndpointCommandMetadata;
  modalEndpoint:       TentacledModalEndpoint;
}

export interface TentacledModalEndpoint {
  modal: StickyModal;
}

export interface StickyModal {
  modalWithTitleAndButtonRenderer: StickyModalWithTitleAndButtonRenderer;
}

export interface StickyModalWithTitleAndButtonRenderer {
  title:   HammerfestPonies;
  content: HammerfestPonies;
  button:  TentacledButton;
}

export interface TentacledButton {
  buttonRenderer: TentacledButtonRenderer;
}

export interface TentacledButtonRenderer {
  style:              string;
  size:               string;
  isDisabled:         boolean;
  text:               HammerfestPonies;
  navigationEndpoint: HilariousNavigationEndpoint;
  trackingParams:     string;
}

export interface HilariousNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  signInEndpoint:      TentacledSignInEndpoint;
}

export interface TentacledSignInEndpoint {
  nextEndpoint:   CurrentVideoEndpoint;
  continueAction: string;
  idamTag:        string;
}

export interface TwoColumnWatchNextResultsSecondaryResults {
  secondaryResults: SecondaryResultsSecondaryResults;
}

export interface SecondaryResultsSecondaryResults {
  results:        SecondaryResultsResult[];
  trackingParams: string;
  targetId:       string;
}

export interface SecondaryResultsResult {
  compactVideoRenderer?:     CompactVideoRenderer;
  continuationItemRenderer?: ResultContinuationItemRenderer;
}

export interface CompactVideoRenderer {
  videoId:            string;
  thumbnail:          IconClass;
  title:              ShortViewCountText;
  longBylineText:     Byline;
  publishedTimeText:  HammerfestPonies;
  viewCountText:      HammerfestPonies;
  lengthText:         ShortViewCountText;
  navigationEndpoint: CompactVideoRendererNavigationEndpoint;
  shortBylineText:    Byline;
  channelThumbnail:   IconClass;
  ownerBadges:        OwnerBadgeElement[];
  trackingParams:     string;
  shortViewCountText: ShortViewCountText;
  menu:               CompactVideoRendererMenu;
  thumbnailOverlays:  CompactVideoRendererThumbnailOverlay[];
  accessibility:      AccessibilityData;
  richThumbnail:      RichThumbnail;
  badges?:            PurpleBadge[];
}

export interface PurpleBadge {
  metadataBadgeRenderer: PurpleMetadataBadgeRenderer;
}

export interface PurpleMetadataBadgeRenderer {
  style:          string;
  label:          string;
  trackingParams: string;
}

export interface CompactVideoRendererMenu {
  menuRenderer: PurpleMenuRenderer;
}

export interface PurpleMenuRenderer {
  items:          FluffyItem[];
  trackingParams: string;
  accessibility:  AccessibilityData;
  targetId?:      string;
}

export interface FluffyItem {
  menuServiceItemRenderer: MenuItemRenderer;
}

export interface CompactVideoRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  watchEndpoint:       PurpleWatchEndpoint;
}

export interface PurpleWatchEndpoint {
  videoId:                            string;
  nofollow:                           boolean;
  watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
}

export interface RichThumbnail {
  movingThumbnailRenderer: MovingThumbnailRenderer;
}

export interface MovingThumbnailRenderer {
  movingThumbnailDetails: MovingThumbnailDetails;
  enableHoveredLogging:   boolean;
  enableOverlay:          boolean;
}

export interface MovingThumbnailDetails {
  thumbnails:           ThumbnailElement[];
  logAsMovingThumbnail: boolean;
}

export interface CompactVideoRendererThumbnailOverlay {
  thumbnailOverlayTimeStatusRenderer?:   ThumbnailOverlayTimeStatusRenderer;
  thumbnailOverlayToggleButtonRenderer?: ThumbnailOverlayToggleButtonRenderer;
  thumbnailOverlayNowPlayingRenderer?:   ThumbnailOverlayNowPlayingRenderer;
}

export interface ThumbnailOverlayNowPlayingRenderer {
  text: ArakGroundhog;
}

export interface ThumbnailOverlayTimeStatusRenderer {
  text:  ShortViewCountText;
  style: ThumbnailOverlayTimeStatusRendererStyle;
}

export enum ThumbnailOverlayTimeStatusRendererStyle {
  Default = "DEFAULT",
}

export interface ThumbnailOverlayToggleButtonRenderer {
  isToggled?:               boolean;
  untoggledIcon:            IconImageClass;
  toggledIcon:              IconImageClass;
  untoggledTooltip:         UntoggledTooltip;
  toggledTooltip:           ToggledTooltip;
  untoggledServiceEndpoint: UntoggledServiceEndpoint;
  toggledServiceEndpoint?:  RemoveFromWatchLaterCommand;
  untoggledAccessibility:   AccessibilityData;
  toggledAccessibility:     AccessibilityData;
  trackingParams:           string;
}

export enum ToggledTooltip {
  Added = "Added",
}

export interface UntoggledServiceEndpoint {
  clickTrackingParams:    string;
  commandMetadata:        PurpleCommandMetadata;
  playlistEditEndpoint?:  AddToWatchLaterCommandPlaylistEditEndpoint;
  signalServiceEndpoint?: UntoggledServiceEndpointSignalServiceEndpoint;
}

export interface UntoggledServiceEndpointSignalServiceEndpoint {
  signal:  Signal;
  actions: IndecentAction[];
}

export interface IndecentAction {
  clickTrackingParams:  string;
  addToPlaylistCommand: AddToPlaylistCommand;
}

export enum UntoggledTooltip {
  AddToQueue = "Add to queue",
  WatchLater = "Watch later",
}

export interface ResultContinuationItemRenderer {
  trigger:              string;
  continuationEndpoint: PurpleContinuationEndpoint;
  button:               A11YSkipNavigationButtonClass;
}

export interface EngagementPanel {
  engagementPanelSectionListRenderer: EngagementPanelSectionListRenderer;
}

export interface EngagementPanelSectionListRenderer {
  panelIdentifier:   string;
  header:            Header;
  content:           EngagementPanelSectionListRendererContent;
  targetId:          string;
  visibility:        string;
  loggingDirectives: LoggingDirectives;
}

export interface EngagementPanelSectionListRendererContent {
  continuationItemRenderer: FluffyContinuationItemRenderer;
}

export interface FluffyContinuationItemRenderer {
  trigger:              string;
  continuationEndpoint: FluffyContinuationEndpoint;
}

export interface FluffyContinuationEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       PurpleCommandMetadata;
  getTranscriptEndpoint: GetTranscriptEndpoint;
}

export interface GetTranscriptEndpoint {
  params: string;
}

export interface Header {
  engagementPanelTitleHeaderRenderer: EngagementPanelTitleHeaderRenderer;
}

export interface EngagementPanelTitleHeaderRenderer {
  title:            ArakGroundhog;
  menu:             EngagementPanelTitleHeaderRendererMenu;
  visibilityButton: VisibilityButton;
  trackingParams:   string;
}

export interface EngagementPanelTitleHeaderRendererMenu {
  menuRenderer: FluffyMenuRenderer;
}

export interface FluffyMenuRenderer {
  items:          TentacledItem[];
  trackingParams: string;
  accessibility:  AccessibilityData;
}

export interface TentacledItem {
  menuServiceItemRenderer: MenuServiceItemRenderer;
}

export interface MenuServiceItemRenderer {
  text:            ArakGroundhog;
  serviceEndpoint: OnResponseReceivedEndpoint;
  trackingParams:  string;
}

export interface OnResponseReceivedEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       ServiceEndpointCommandMetadata;
  signalServiceEndpoint: CommandSignalServiceEndpoint;
}

export interface VisibilityButton {
  buttonRenderer: VisibilityButtonButtonRenderer;
}

export interface VisibilityButtonButtonRenderer {
  icon:              IconImageClass;
  accessibility:     Accessibility;
  trackingParams:    string;
  accessibilityData: AccessibilityData;
  command:           FluffyCommand;
}

export interface FluffyCommand {
  clickTrackingParams:                   string;
  changeEngagementPanelVisibilityAction: ChangeEngagementPanelVisibilityAction;
}

export interface ResponseFrameworkUpdates {
  entityBatchUpdate: FluffyEntityBatchUpdate;
}

export interface FluffyEntityBatchUpdate {
  mutations: FluffyMutation[];
  timestamp: Timestamp;
}

export interface FluffyMutation {
  entityKey: string;
  type:      string;
  options:   Options;
}

export interface Options {
  persistenceOption: string;
}

export interface Overlay {
  tooltipRenderer: TooltipRenderer;
}

export interface TooltipRenderer {
  promoConfig:       PromoConfig;
  targetId:          string;
  text:              ArakGroundhog;
  detailsText:       ArakGroundhog;
  dismissButton:     DismissButtonClass;
  suggestedPosition: DismissStrategy;
  dismissStrategy:   DismissStrategy;
  trackingParams:    string;
}

export interface PromoConfig {
  promoId:             string;
  impressionEndpoints: AcceptCommand[];
  acceptCommand:       AcceptCommand;
  dismissCommand:      AcceptCommand;
}

export interface PlayerOverlays {
  playerOverlayRenderer: PlayerOverlayRenderer;
}

export interface PlayerOverlayRenderer {
  endScreen:    EndScreen;
  autoplay:     PlayerOverlayRendererAutoplay;
  shareButton:  ShareButtonClass;
  addToMenu:    AddToMenu;
  videoDetails: PlayerOverlayRendererVideoDetails;
}

export interface AddToMenu {
  menuRenderer: Renderer;
}

export interface PlayerOverlayRendererAutoplay {
  playerOverlayAutoplayRenderer: PlayerOverlayAutoplayRenderer;
}

export interface PlayerOverlayAutoplayRenderer {
  title:                        HammerfestPonies;
  videoTitle:                   ShortViewCountText;
  byline:                       Byline;
  cancelText:                   HammerfestPonies;
  pauseText:                    HammerfestPonies;
  background:                   IconClass;
  countDownSecs:                number;
  nextButton:                   A11YSkipNavigationButtonClass;
  trackingParams:               string;
  thumbnailOverlays:            PlayerOverlayAutoplayRendererThumbnailOverlay[];
  preferImmediateRedirect:      boolean;
  videoId:                      string;
  publishedTimeText:            HammerfestPonies;
  webShowNewAutonavCountdown:   boolean;
  webShowBigThumbnailEndscreen: boolean;
  shortViewCountText:           ShortViewCountText;
}

export interface PlayerOverlayAutoplayRendererThumbnailOverlay {
  thumbnailOverlayTimeStatusRenderer: ThumbnailOverlayTimeStatusRenderer;
}

export interface EndScreen {
  watchNextEndScreenRenderer: WatchNextEndScreenRenderer;
}

export interface WatchNextEndScreenRenderer {
  results:        WatchNextEndScreenRendererResult[];
  title:          HammerfestPonies;
  trackingParams: string;
}

export interface WatchNextEndScreenRendererResult {
  endScreenVideoRenderer: EndScreenVideoRenderer;
}

export interface EndScreenVideoRenderer {
  videoId:            string;
  thumbnail:          IconClass;
  title:              ShortViewCountText;
  shortBylineText:    Byline;
  lengthText:         ShortViewCountText;
  lengthInSeconds:    number;
  navigationEndpoint: CurrentVideoEndpoint;
  trackingParams:     string;
  shortViewCountText: ShortViewCountText;
  publishedTimeText:  HammerfestPonies;
  thumbnailOverlays:  EndScreenVideoRendererThumbnailOverlay[];
}

export interface EndScreenVideoRendererThumbnailOverlay {
  thumbnailOverlayTimeStatusRenderer?: ThumbnailOverlayTimeStatusRenderer;
  thumbnailOverlayNowPlayingRenderer?: ThumbnailOverlayNowPlayingRenderer;
}

export interface ShareButtonClass {
  buttonRenderer: ShareButtonButtonRenderer;
}

export interface ShareButtonButtonRenderer {
  style:               string;
  size:                string;
  isDisabled:          boolean;
  icon:                IconImageClass;
  navigationEndpoint?: Endpoint;
  tooltip:             string;
  trackingParams:      string;
  serviceEndpoint?:    ButtonRendererServiceEndpoint;
  accessibilityData?:  AccessibilityData;
}

export interface ButtonRendererServiceEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       ServiceEndpointCommandMetadata;
  signalServiceEndpoint: TentacledSignalServiceEndpoint;
}

export interface TentacledSignalServiceEndpoint {
  signal:  Signal;
  actions: HilariousAction[];
}

export interface HilariousAction {
  clickTrackingParams: string;
  openPopupAction:     TentacledOpenPopupAction;
}

export interface TentacledOpenPopupAction {
  popup:     StickyPopup;
  popupType: string;
}

export interface StickyPopup {
  voiceSearchDialogRenderer: VoiceSearchDialogRenderer;
}

export interface VoiceSearchDialogRenderer {
  placeholderHeader:              ArakGroundhog;
  promptHeader:                   ArakGroundhog;
  exampleQuery1:                  ArakGroundhog;
  exampleQuery2:                  ArakGroundhog;
  promptMicrophoneLabel:          ArakGroundhog;
  loadingHeader:                  ArakGroundhog;
  connectionErrorHeader:          ArakGroundhog;
  connectionErrorMicrophoneLabel: ArakGroundhog;
  permissionsHeader:              ArakGroundhog;
  permissionsSubtext:             ArakGroundhog;
  disabledHeader:                 ArakGroundhog;
  disabledSubtext:                ArakGroundhog;
  exitButton:                     ClearButtonClass;
  trackingParams:                 string;
  microphoneOffPromptHeader:      ArakGroundhog;
}

export interface ClearButtonClass {
  buttonRenderer: ClearButtonButtonRenderer;
}

export interface ClearButtonButtonRenderer {
  style:             string;
  size:              string;
  isDisabled:        boolean;
  icon:              IconImageClass;
  trackingParams:    string;
  accessibilityData: AccessibilityData;
}

export interface PlayerOverlayRendererVideoDetails {
  playerOverlayVideoDetailsRenderer: PlayerOverlayVideoDetailsRenderer;
}

export interface PlayerOverlayVideoDetailsRenderer {
  title:    HammerfestPonies;
  subtitle: ArakGroundhog;
}

export interface ResponseResponseContext {
  serviceTrackingParams:           ServiceTrackingParam[];
  mainAppWebResponseContext:       MainAppWebResponseContext;
  webResponseContextExtensionData: FluffyWebResponseContextExtensionData;
}

export interface FluffyWebResponseContextExtensionData {
  ytConfigData:    YtConfigData;
  webPrefetchData: WebPrefetchData;
  hasDecorated:    boolean;
}

export interface WebPrefetchData {
  navigationEndpoints: NavigationEndpoint[];
}

export interface YtConfigData {
  visitorData:           string;
  rootVisualElementType: number;
}

export interface Topbar {
  desktopTopbarRenderer: DesktopTopbarRenderer;
}

export interface DesktopTopbarRenderer {
  logo:                     Logo;
  searchbox:                Searchbox;
  trackingParams:           string;
  countryCode:              string;
  topbarButtons:            TopbarButton[];
  hotkeyDialog:             HotkeyDialog;
  backButton:               BackButtonClass;
  forwardButton:            BackButtonClass;
  a11ySkipNavigationButton: A11YSkipNavigationButtonClass;
  voiceSearchButton:        ShareButtonClass;
}

export interface BackButtonClass {
  buttonRenderer: BackButtonButtonRenderer;
}

export interface BackButtonButtonRenderer {
  trackingParams: string;
  command:        OnResponseReceivedEndpoint;
}

export interface HotkeyDialog {
  hotkeyDialogRenderer: HotkeyDialogRenderer;
}

export interface HotkeyDialogRenderer {
  title:          ArakGroundhog;
  sections:       HotkeyDialogRendererSection[];
  dismissButton:  DismissButtonClass;
  trackingParams: string;
}

export interface HotkeyDialogRendererSection {
  hotkeyDialogSectionRenderer: HotkeyDialogSectionRenderer;
}

export interface HotkeyDialogSectionRenderer {
  title:   ArakGroundhog;
  options: Option[];
}

export interface Option {
  hotkeyDialogSectionOptionRenderer: HotkeyDialogSectionOptionRenderer;
}

export interface HotkeyDialogSectionOptionRenderer {
  label:                     ArakGroundhog;
  hotkey:                    string;
  hotkeyAccessibilityLabel?: AccessibilityData;
}

export interface Logo {
  topbarLogoRenderer: TopbarLogoRenderer;
}

export interface TopbarLogoRenderer {
  iconImage:         IconImageClass;
  tooltipText:       ArakGroundhog;
  endpoint:          TopbarLogoRendererEndpoint;
  trackingParams:    string;
  overrideEntityKey: string;
}

export interface TopbarLogoRendererEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  browseEndpoint:      EndpointBrowseEndpoint;
}

export interface Searchbox {
  fusionSearchboxRenderer: FusionSearchboxRenderer;
}

export interface FusionSearchboxRenderer {
  icon:            IconImageClass;
  placeholderText: ArakGroundhog;
  config:          Config;
  trackingParams:  string;
  searchEndpoint:  FusionSearchboxRendererSearchEndpoint;
  clearButton:     ClearButtonClass;
}

export interface Config {
  webSearchboxConfig: WebSearchboxConfig;
}

export interface WebSearchboxConfig {
  requestLanguage:     string;
  requestDomain:       string;
  hasOnscreenKeyboard: boolean;
  focusSearchbox:      boolean;
}

export interface FusionSearchboxRendererSearchEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  searchEndpoint:      SearchEndpointSearchEndpoint;
}

export interface SearchEndpointSearchEndpoint {
  query: string;
}

export interface TopbarButton {
  topbarMenuButtonRenderer?: TopbarMenuButtonRenderer;
  buttonRenderer?:           TopbarButtonButtonRenderer;
}

export interface TopbarButtonButtonRenderer {
  style:              string;
  size:               string;
  text:               ArakGroundhog;
  icon:               IconImageClass;
  navigationEndpoint: AmbitiousNavigationEndpoint;
  trackingParams:     string;
  targetId:           string;
}

export interface AmbitiousNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  signInEndpoint:      StickySignInEndpoint;
}

export interface StickySignInEndpoint {
  idamTag: string;
}

export interface TopbarMenuButtonRenderer {
  icon:           IconImageClass;
  menuRenderer?:  TopbarMenuButtonRendererMenuRenderer;
  trackingParams: string;
  accessibility:  AccessibilityData;
  tooltip:        string;
  style:          string;
  targetId?:      string;
  menuRequest?:   MenuRequest;
}

export interface TopbarMenuButtonRendererMenuRenderer {
  multiPageMenuRenderer: MenuRendererMultiPageMenuRenderer;
}

export interface MenuRendererMultiPageMenuRenderer {
  sections:       MultiPageMenuRendererSection[];
  trackingParams: string;
}

export interface MultiPageMenuRendererSection {
  multiPageMenuSectionRenderer: MultiPageMenuSectionRenderer;
}

export interface MultiPageMenuSectionRenderer {
  items:          MultiPageMenuSectionRendererItem[];
  trackingParams: string;
}

export interface MultiPageMenuSectionRendererItem {
  compactLinkRenderer: CompactLinkRenderer;
}

export interface CompactLinkRenderer {
  icon:               IconImageClass;
  title:              ArakGroundhog;
  navigationEndpoint: CompactLinkRendererNavigationEndpoint;
  trackingParams:     string;
}

export interface CompactLinkRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     CurrentVideoEndpointCommandMetadata;
  urlEndpoint:         FluffyURLEndpoint;
}

export interface FluffyURLEndpoint {
  url:    string;
  target: string;
}

export interface MenuRequest {
  clickTrackingParams:   string;
  commandMetadata:       PurpleCommandMetadata;
  signalServiceEndpoint: MenuRequestSignalServiceEndpoint;
}

export interface MenuRequestSignalServiceEndpoint {
  signal:  string;
  actions: AmbitiousAction[];
}

export interface AmbitiousAction {
  clickTrackingParams: string;
  openPopupAction:     StickyOpenPopupAction;
}

export interface StickyOpenPopupAction {
  popup:     IndigoPopup;
  popupType: string;
  beReused:  boolean;
}

export interface IndigoPopup {
  multiPageMenuRenderer: PopupMultiPageMenuRenderer;
}

export interface PopupMultiPageMenuRenderer {
  trackingParams:     string;
  style:              string;
  showLoadingSpinner: boolean;
}

export interface InfoVideoVideoDetails {
  embed:              Embed;
  title:              string;
  description:        string;
  lengthSeconds:      string;
  ownerProfileUrl:    string;
  externalChannelId:  ChannelID;
  isFamilySafe:       boolean;
  availableCountries: string[];
  isUnlisted:         boolean;
  hasYpcMetadata:     boolean;
  viewCount:          string;
  category:           string;
  publishDate:        string;
  ownerChannelName:   OwnerChannelName;
  uploadDate:         string;
  videoId:            string;
  keywords:           string[];
  channelId:          ChannelID;
  isOwnerViewing:     boolean;
  isCrawlable:        boolean;
  averageRating:      number;
  allowRatings:       boolean;
  author:             Author;
  isPrivate:          boolean;
  isUnpluggedCorpus:  boolean;
  isLiveContent:      boolean;
  media:              Media;
  likes:              number;
  dislikes:           number;
  age_restricted:     boolean;
  video_url:          string;
  storyboards:        Storyboard[];
  chapters:           any[];
  thumbnails:         ThumbnailElement[];
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface Media {
}

export interface Storyboard {
  templateUrl:     string;
  thumbnailWidth:  number;
  thumbnailHeight: number;
  thumbnailCount:  number;
  interval:        number;
  columns:         number;
  rows:            number;
  storyboardCount: number;
}

// Generated by https://quicktype.io

export interface GithubRelease {
  url:              string;
  assets_url:       string;
  upload_url:       string;
  html_url:         string;
  id:               number;
  author:           Author;
  node_id:          string;
  tag_name:         string;
  target_commitish: string;
  name:             string;
  draft:            boolean;
  prerelease:       boolean;
  created_at:       string;
  published_at:     string;
  assets:           Asset[];
  tarball_url:      string;
  zipball_url:      string;
  body:             string;
}

export interface Asset {
  url:                  string;
  id:                   number;
  node_id:              string;
  name:                 string;
  label:                null;
  uploader:             Author;
  content_type:         string;
  state:                string;
  size:                 number;
  download_count:       number;
  created_at:           string;
  updated_at:           string;
  browser_download_url: string;
}

export interface Author {
  login:               string;
  node_id:             string;
  avatar_url:          string;
  gravatar_id:         string;
  url:                 string;
  html_url:            string;
  followers_url:       string;
  following_url:       string;
  gists_url:           string;
  starred_url:         string;
  subscriptions_url:   string;
  organizations_url:   string;
  repos_url:           string;
  events_url:          string;
  received_events_url: string;
  type:                string;
  site_admin:          boolean;
}

