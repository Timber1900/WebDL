#!/usr/bin/env node
var optimist = require('optimist');
var updateNotifier = require('update-notifier');
var NwBuilder = require('./../lib');
var path = require('path');
var detectCurrentPlatform = require('../lib/detectCurrentPlatform.js');

var argv = optimist
    .usage('Usage: nwbuild [options] [path]')

    .alias('p', 'platforms')
    .describe('p', 'Platforms to build, comma-sperated, can be: win32,win64,osx32,osx64,linux32,linux64')

    .alias('v', 'version')
    .default('v', 'latest')
    .describe('v', 'The nw version, eg. 0.8.4')

    .alias('r', 'run')
    .default('r', false)
    .describe('r', 'Runs NW.js for the current platform')
    .boolean('r')

    .alias('o', 'buildDir')
    .default('o', './build')
    .describe('o', 'The build folder')

    .alias('f', 'forceDownload')
    .default('f', false)
    .describe('f', 'Force download of NW.js')
    .boolean('f')

    .alias('n', 'name')
    .describe('n', 'The Name of your NW.js app.')

    .describe('cacheDir', 'The cache folder')

    .default('quiet', false)
    .describe('quiet', 'Disables logging')
    .boolean('quiet')

    .argv;

// Howto Help
if (argv.h || argv.help) {
    optimist.showHelp();
    process.exit(0);
}

// Error if there are no files
var files = argv._[0];
if(!files) {
    optimist.showHelp();
    process.exit(1);
}

var options = {
    appName: argv.name,
    files: path.resolve(process.cwd(), files) + '/**/*',
    flavor: argv.flavor || 'sdk',
    platforms: argv.platforms ? argv.platforms.split(',') : null,
    version: argv.version,
    macIcns: argv.macIcns || false,
    winIco: argv.winIco || false,
    cacheDir: argv.cacheDir ? path.resolve(process.cwd(), argv.cacheDir) : path.resolve(__dirname, '..', 'cache'),
    buildDir: path.resolve(process.cwd(), argv.buildDir),
    forceDownload: argv.forceDownload
};

// If we are in run mode
if(argv.r) {
    var currentPlatform = detectCurrentPlatform();
    if(!options.platforms){
        options.platforms = [ currentPlatform ];
    }
    options.currentPlatform = currentPlatform;
}

// Set default target platforms here
// Remove osx32 from default, nwjs didn't support osx32 yet
if (!options.platforms) {
    options.platforms = ['osx64', 'win32', 'win64'];
}

// Build App
var nw = new NwBuilder(options);

// Logging
if(!(argv.quiet || argv.quite)) {
    nw.on('log',  console.log);
}

// Build or run the app
var np = (argv.r ? nw.run() : nw.build());
np.then(function() {
    process.exit(0);
}).catch (function(error) {
    if (error) {
        console.error(error);
        process.exit(1);
    }
});
